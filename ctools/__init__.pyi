"""
Copyright (c) 2019 ko han

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from datetime import datetime
from typing import Any, Mapping, Iterable, Tuple, Callable, Optional


def jump_consistent_hash(key: int, num_bucket: int) -> int: ...


def strhash(s: str, method: str = 'fnv1a') -> int: ...


def int8_to_datetime(date_integer: int) -> datetime: ...


class CacheMap:
    def __init__(self, capacity: int) -> None: ...

    def get(self, key, default=None): ...

    def pop(self, key, default=None): ...

    def setdefault(self, *args, **kwargs): ...

    def update(self, mp: Optional[Mapping] = None, **kwargs): ...

    def keys(self) -> Iterable: ...

    def values(self) -> Iterable: ...

    def items(self) -> Iterable[Tuple]: ...

    def clear(self): ...

    def evict(self) -> None: ...

    def set_capacity(self, capacity: int) -> None: ...

    def hints(self) -> (int, int, int): ...

    def next_evict_key(self) -> Any: ...

    def setnx(self, key, fn: Callable[[], Any]): ...


class TTLCache:
    def __init__(self, ttl: int) -> None: ...

    def get(self, key, default=None): ...

    def pop(self, key, default=None): ...

    def setdefault(self, key, default=None): ...

    def update(self, mp: Optional[Mapping] = None): ...

    def keys(self) -> Iterable: ...

    def values(self) -> Iterable: ...

    def items(self) -> Iterable[Tuple]: ...

    def clear(self): ...

    def set_default_ttl(self, ttl: int) -> None: ...

    def get_default_ttl(self) -> int: ...

    def setnx(self, key, fn: Callable[[], Any]): ...
